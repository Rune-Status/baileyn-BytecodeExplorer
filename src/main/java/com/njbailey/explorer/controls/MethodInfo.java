package com.njbailey.explorer.controls;

import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TitledPane;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.MethodNode;

import java.lang.reflect.Modifier;

public class MethodInfo extends VBox {
    private MethodNode method;

    public MethodInfo(MethodNode method) {
        this.method = method;
        setPadding(new Insets(15.0));
        setSpacing(10.0);

        HBox hbox = new HBox();
        hbox.setSpacing(15.0);

        Label nameLabel = new Label("Name:");
        Label nameEditableLabel = new Label(method.getName());
        hbox.getChildren().addAll(nameLabel, nameEditableLabel);

        Node modifierInfo = createModifierInfo();
        getChildren().addAll(hbox, modifierInfo);
    }

    private Node createModifierInfo() {
        TitledPane titledPane = new TitledPane();
        titledPane.setText("Modifiers");

        FlowPane flowPane = new FlowPane();
        flowPane.setHgap(15.0);
        flowPane.setVgap(15.0);

        int access = method.getAccess();

        flowPane.getChildren().addAll(
                createCheckBox("Public", Modifier.isPublic(access), "Declared public; may be accessed from outside its package."),
                createCheckBox("Private", Modifier.isPrivate(access), "Declared private; accessible only within the defining class."),
                createCheckBox("Protected", Modifier.isProtected(access), "Declared protected; may be accessed within subclasses."),
                createCheckBox("Static", Modifier.isStatic(access), "Declared static."),
                createCheckBox("Final", Modifier.isFinal(access), "Declared final; must not be overridden."),
                createCheckBox("Synchronized", Modifier.isSynchronized(access), "Declared synchronized; invocation is wrapped by a monitor use."),
                createCheckBox("Bridge", (access & Opcodes.ACC_BRIDGE) != 0, "A bridge method, generated by the compiler."),
                createCheckBox("Varargs", (access & Opcodes.ACC_VARARGS) != 0, "Declared with variable number of arguments."),
                createCheckBox("Native", Modifier.isNative(access), "Declared native; implemented in a language other than Java."),
                createCheckBox("Abstract", Modifier.isAbstract(access), "Declared abstract; no implementation is provided."),
                createCheckBox("Strict", Modifier.isStrict(access), "Declared strictfp; floating-point mode is FP-strict."),
                createCheckBox("Synthetic", (access & Opcodes.ACC_SYNTHETIC) != 0, "Declared synthetic; not present in the source code.")
        );
        
        titledPane.setContent(flowPane);

        return titledPane;
    }

    private CheckBox createCheckBox(String text, boolean defaultValue, String description) {
        CheckBox checkBox =  new CheckBox(text);
        checkBox.setSelected(defaultValue);
        checkBox.setTooltip(new Tooltip(description));
        return checkBox;
    }
}
